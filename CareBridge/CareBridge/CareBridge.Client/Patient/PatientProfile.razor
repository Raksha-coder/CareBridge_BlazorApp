@page "/Patient/PatientProfile/{Id:int}"
@using System.Text.Json
@layout MainLayout
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))
<PageTitle>PatientProfile</PageTitle>

<MatButtonLink Href="/patientdashboard"><MatIcon Icon="arrow_back"></MatIcon> Back</MatButtonLink>
<MatCard>
    <MatHeadline6>
        Patient Profile
    </MatHeadline6>
    <MatCardContent>
        <EditForm Model="@patient" OnValidSubmit="HandleValidSubmit">
            <DataAnnotationsValidator />
            <div class="row mt-3">
                <div class="col-6">
                    <MatTextField Label="First  Name" Outlined="true" @bind-Value="patient.FirstName" MaxLength="50" />
                </div>
                <div class="col-6">
                    <MatTextField Label="Last Name" Outlined="true" @bind-Value="patient.LastName" MaxLength="50" />
                </div>
            </div>
            <div class="row mt-3">
                <div class="col-6">
                    <MatTextField Label="Email" Outlined="true" @bind-Value="patient.Email" MaxLength="100" Type="email" />
                </div>
                <div class="col-6">
                    <MatTextField Label="Mobile" @bind-Value="patient.Mobile" Type="tel" />
                </div>
            </div>
            <div class="row mt-3">
                <div class="col-6">
                    <MatTextField Label="Blood Group" Outlined="true" @bind-Value="patient.BloodGroup" MaxLength="5" />
                </div>
                <div class="col-6">
                    <MatDatePicker Label="Date of Birth" Outlined="true" @bind-Value="patient.DOB" />
                </div>
            </div>
            <div class="row mt-3">
                <div class="col-6">
                    <MatTextField Label="Gender" Outlined="true" @bind-Value="patient.Gender" Required="true" />
                </div>
                <div class="col-6">
                    @if (Countries != null && Countries.Any())
                    {
                        <MatSelect @bind-Value="@patient.CountryId" Label="Country" Outlined="true">
                            @foreach (var item in Countries)
                            {
                                <MatOption Value="@item.CountryId"> @item.Name</MatOption>
                            }
                        </MatSelect>
                    }
                    else
                    {
                        <p>Loading Country...</p>
                    }
                </div>
            </div>
            <div class="row mt-3">
                <div class="col-6">
                    @if (States != null)
                    {
                        <MatSelect @bind-Value="@patient.StateId" Label="State" Outlined="true">
                            @foreach (var item in States)
                            {
                                <MatOption Value="@item.StateId">@item.StateName</MatOption>
                            }
                        </MatSelect>
                    }
                    else
                    {
                        <p>Loading states...</p>
                    }
                </div>
                <div class="col-6">
                    <MatTextField @bind-Value="@patient.City" Outlined="true" Label="Enter  City"></MatTextField>
                </div>
            </div>
            <div class="row mt-3">
                <div class="col-6">
                    <MatTextField @bind-Value="@patient.PinCode" Outlined="true" Label="Enter PinCode"></MatTextField>
                </div>
                <div class="col-6">
                    <MatTextField @bind-Value="@patient.Address" Outlined="true" Label="Enter  Address"></MatTextField>
                </div>
            </div>
            <div class="row mt-3">
                <div class="col-6 centered-mat-button">
                    <MatButton Class="large-mat-button" Type="submit" Raised="true">Save</MatButton>
                </div>
            </div>
            <!-- Add MatSelect for StateId and CountryId as needed -->
        </EditForm>
    </MatCardContent>
</MatCard>


@code {
    [Inject]
    private HttpClient HttpClient { get; set; }

    [Inject]
    private NavigationManager Navigation { get; set; }

    private JsonResponseDto JsonResponseDto { get; set; }

    [Parameter]
    public int Id { get; set; }

    private PatientRegisterDto patient = new PatientRegisterDto();

    private List<Country> Countries { get; set; }

    [Inject]
    private IMatToaster Toaster { get; set; }

    private List<State> States { get; set; }
    private async Task HandleValidSubmit()
    {
        var response = await HttpClient.PostAsJsonAsync("api/Patient/UpdatePatient", patient);
        if (response.IsSuccessStatusCode)
        {
            Toaster.Add("Patient Updated Successfully", MatToastType.Success);
            Navigation.NavigateTo("/patientdashboard");
        }
        else
        {
            Toaster.Add("Something went wrong", MatToastType.Danger);
        }
    }

    protected async override Task OnInitializedAsync()
    {
        Countries = await HttpClient.GetFromJsonAsync<List<Country>>("api/Country/GetAllCountries") ?? new List<Country>();
        States = await HttpClient.GetFromJsonAsync<List<State>>("api/State/GetAllStates") ?? new List<State>();
        JsonResponseDto = await HttpClient.GetFromJsonAsync<JsonResponseDto>($"api/Patient/GetPatientById/{Id}");

        @if (JsonResponseDto != null && JsonResponseDto.Data != null)
        {
            var json = JsonResponseDto.Data.ToString();
            patient = JsonSerializer.Deserialize<PatientRegisterDto>(json, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
            // Log the patient object as JSON
            Console.WriteLine($"Patient Data: {JsonSerializer.Serialize(patient)}");

        }
    }


}
