@page "/superadmin/superadmindashboard"
@using System.IdentityModel.Tokens.Jwt
@using System.Text.Json
@layout MainLayout
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))
@inject SweetAlertService Swal
<PageTitle>SuperAdminDashboard</PageTitle>

<div class="container">
    <div class="mb-3">
        <MatButton Outlined="true" OnClick="@ShowRecentRequests">Recent Requests</MatButton>
        <MatButton Outlined="true" OnClick="@ShowAllocatedDatabases">Allocated Databases</MatButton>
        <MatButton Outlined="true" OnClick="@CreateOrganizationRequest">Create Organization</MatButton>
        <MatButton Outlined="true" OnClick="@onAlert">Alert</MatButton>

    </div>

    @if (tasks != null)
    {
        <MatTable Items="tasks" class="mat-elevation-z5" AllowSelection="true">
            <MatTableHeader>
                <th>Id</th>
                <th>Name</th>
                <th>Description</th>
                <th>Actions</th>
            </MatTableHeader>
            <MatTableRow>
                <td>@context.TenantID</td>
                <td>@context.OrganizationName</td>
                <td>@context.Description</td>
                <td>
                    <MatButton OnClick="@(() => UpdateById(context.TenantID))" Outlined="true" Class="mat-primary">Update</MatButton>
                    <MatButton OnClick="@(() => ConfirmDelete(context.TenantID))" Outlined="true" Class="mat-warn">Delete</MatButton>
                </td>
            </MatTableRow>
        </MatTable>

        <MatDialog @bind-IsOpen="isDeleteDialogOpen">
            <MatDialogTitle>Confirm Delete</MatDialogTitle>
            <MatDialogContent>
                Are you sure you want to delete this request?
            </MatDialogContent>
            <MatDialogActions>
                <MatButton OnClick="DeleteConfirmed" Class="mat-warn">Yes</MatButton>
                <MatButton OnClick="CancelDelete">No</MatButton>
            </MatDialogActions>
        </MatDialog>

        <MatDialog @bind-IsOpen="isUpdateDialogOpen">
            <MatDialogContent>
                <MatTextField Label="Id" @bind-Value="selectedTask.Email" Disabled="true" />
                <MatTextField Label="Name" @bind-Value="selectedTask.OrganizationName" Disabled="true" />
                <MatTextField Label="Description" @bind-Value="selectedTask.Description" Disabled="true" />
            </MatDialogContent>
            <MatDialogActions>
                <MatButton OnClick="@(() => UpdateConfirmed(selectedTask.TenantID))" Class="mat-primary">Yes</MatButton>
                <MatButton OnClick="CancelUpdate">No</MatButton>
            </MatDialogActions>
        </MatDialog>
    }
    else
    {
        <p>Loading...</p>
    }


</div>

@code {

    [Inject]
    ILocalStorageService localStorageService { get; set; }
    [Inject]
    NavigationManager Navigation { get; set; }


    [Inject]
    private HttpClient Http { get; set; }


    private JsonResponseDto jsonResponseDto
    { get; set; }
    private OrganizationRequestDto selectedTask = new OrganizationRequestDto();

    private OrganizationRequest organizationDatabaseresponse = new OrganizationRequest();
    private List<OrganizationRequestDto> tasks;
    private bool isDeleteDialogOpen = false;
    private int deleteId;
    private int tennatId;
    private bool isUpdateDialogOpen = false;
    protected override async Task OnInitializedAsync()
    {
        var token = await localStorageService.GetItemAsync<string>("authToken");
        if (!string.IsNullOrEmpty(token))
        {
            var handler = new JwtSecurityTokenHandler();
            var jwtToken = handler.ReadJwtToken(token);
            // Access claims
            var email = jwtToken.Claims.FirstOrDefault(c => c.Type == "Email")?.Value;
        }

        jsonResponseDto = await Http.GetFromJsonAsync<JsonResponseDto>("api/OrganizationRequest/GetAllOrganizationRequestHasNotApproved");
        @if (jsonResponseDto != null && jsonResponseDto.Data != null)
        {
            var json = jsonResponseDto.Data.ToString();
            tasks = JsonSerializer.Deserialize<List<OrganizationRequestDto>>(json, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
            // Log the patient object as JSON
            Console.WriteLine($"Patient Data: {JsonSerializer.Serialize(tasks)}");
        }

    }

    private async Task UpdateById(int id)
    {
        isUpdateDialogOpen = true;
        tennatId = id;
        jsonResponseDto = await Http.GetFromJsonAsync<JsonResponseDto>($"api/OrganizationRequest/GetOrganizationDetailsByTenantId/{tennatId}");
        @if (jsonResponseDto != null && jsonResponseDto.Data != null)
        {
            var json = jsonResponseDto.Data.ToString();
            selectedTask = JsonSerializer.Deserialize<OrganizationRequestDto>(json, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
            // Log the patient object as JSON
            Console.WriteLine($"Patient Data Get By Id: {JsonSerializer.Serialize(selectedTask)}");
        }
    }

    private void ShowRecentRequests()
    {
        Navigation.NavigateTo("/superadmin/recentrequests");
    }

    private void ShowAllocatedDatabases()
    {
        Navigation.NavigateTo("/superadmin/allocateddatabases");
    }
    private void ConfirmDelete(int id)
    {
        deleteId = id;
        isDeleteDialogOpen = true;
    }

    private void CreateOrganizationRequest()
    {
        Navigation.NavigateTo("/superadmin/createorganization");
    }

    private async void DeleteConfirmed()
    {
        isDeleteDialogOpen = false;
        // Call your API to delete
        await Http.DeleteAsync($"api/OrganizationRequest/DeleteOrganizationRequest/{deleteId}");
        // Refresh the list
        jsonResponseDto = await Http.GetFromJsonAsync<JsonResponseDto>("api/OrganizationRequest/GetAllOrganizationRequestHasApproved");
        tasks = jsonResponseDto?.Data as List<OrganizationRequestDto>;
        StateHasChanged();
    }
    private async void UpdateConfirmed(int tennatId)
    {
        isUpdateDialogOpen = false;
        // Call your API to update
        await Http.PostAsJsonAsync($"api/OrganizationRequest/UpdateOrganizationRequest/{tennatId}", selectedTask);
        // Refresh the list
        jsonResponseDto = await Http.GetFromJsonAsync
        <JsonResponseDto>
            ("api/OrganizationRequest/GetAllOrganizationRequestHasApproved");
        tasks = jsonResponseDto?.Data as List<OrganizationRequestDto>
            ;
        StateHasChanged();
    }


    private void CancelDelete()
    {
        isDeleteDialogOpen = false;
    }

    private void CancelUpdate()
    {
        isUpdateDialogOpen = false;
    }


    private async void onAlert()
    {
        await Swal.FireAsync("Hello World");
    }

}
