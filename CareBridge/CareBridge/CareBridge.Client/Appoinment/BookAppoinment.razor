@page "/Appoinment/BookAppoinment/{id?}"
@using App.Application.DTOs
@layout MainLayout
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender:false))

<PageTitle>Book Appointment</PageTitle>

<div class="mt-5 mx-4">

    <h2 class="mb-4 text-center text-primary fw-bold">Book an Appointment</h2>

    @if (staffRegistrationDto != null)
    {
        <div class="custom-card doctor-card mb-5">
            <h4 class="section-title text-primary">Doctor Details</h4>
            <div class="row">
                <div class="col-md-6">
                    <p><strong>Name:</strong> @staffRegistrationDto.FirstName @staffRegistrationDto.LastName</p>
                    <p><strong>Email:</strong> @staffRegistrationDto.Email</p>
                    <p><strong>Phone:</strong> @staffRegistrationDto.PhoneNo</p>
                </div>
                <div class="col-md-6">
                    <p><strong>Designation:</strong> @staffRegistrationDto.Designation</p>
                    <p><strong>Department:</strong> @staffRegistrationDto.Department</p>
                    <p><strong>Experience:</strong> @Experience years</p>
                </div>
            </div>
        </div>
    }

    <div class="custom-card form-card">
        <h4 class="section-title text-success">Appointment Form</h4>
        <EditForm Model="@appoinmentDto" OnValidSubmit="@OnBookAppoinment">
            <DataAnnotationsValidator />

            <MatDatePicker Label="Appointment Date" @bind-Value="appoinmentDto.Date" />

            <div class="form-group mb-3">
                <label for="startTime" class="form-label">Start Time</label>
                <input type="time" id="startTime" class="form-control" @bind-value="appoinmentDto.StartTime" />
            </div>

            <div class="form-group mb-3">
                <label for="endTime" class="form-label">End Time</label>
                <input type="time" id="endTime" class="form-control" @bind-value="appoinmentDto.EndTime" />
            </div>

            <MatTextField Label="Reason" Outlined="true"
                          TextArea="true" FullWidth="true"
                          @bind-Value="appoinmentDto.Reason" />

            <div class="mt-4 text-end">
                <MatButton Raised="true" ButtonType="MatButtonType.Submit" Class="btn-custom">Book Appointment</MatButton>
            </div>

            <ValidationSummary />

        </EditForm>
    </div>
</div>

@code {

    private int Experience { get; set; }

    [Parameter]
    public string id { get; set; }

    private StaffRegistrationDto staffRegistrationDto = new StaffRegistrationDto();

    private AppoinmentDto appoinmentDto = new AppoinmentDto();

    [Inject]
    private HttpClient Http { get; set; }

    [Inject]
    private NavigationManager Navigation { get; set; }

    [Inject]
    private IMatToaster Toaster { get; set; }

    protected override async Task OnInitializedAsync()
    {
        staffRegistrationDto = await Http.GetFromJsonAsync<StaffRegistrationDto>($"/api/Staff/GetStaffById/{id}");

        DateTime today = DateTime.Today;

        if (staffRegistrationDto != null)
        {
            if (staffRegistrationDto.JoiningDate.Date > today.AddYears(-Experience))
            {
                Experience--;
            }
            Experience = today.Year - staffRegistrationDto.JoiningDate.Year;
        }

    }

    private void OnStartTimeChanged(TimeOnly? newStartTime)
    {
        if (newStartTime.HasValue)
        {
            appoinmentDto.StartTime = newStartTime.Value;

            // Suggest default end time = start time + 1 hour
            var suggestedEnd = newStartTime.Value.Add(TimeSpan.FromHours(1));
            if (suggestedEnd.Hour <= 23)
                appoinmentDto.EndTime = suggestedEnd;
        }
    }
    private async Task OnBookAppoinment()
    {
        if (appoinmentDto == null)
        {
            Toaster.Add("Please Enter Appoinment Details", MatToastType.Danger);
            return;
        }
        else
        {

            appoinmentDto.StaffId = staffRegistrationDto.Id;
            await Http.PostAsJsonAsync("/api/Appoinment", appoinmentDto);
            Toaster.Add("Appoinment Booked Successfully", MatToastType.Success);
            Navigation.NavigateTo("/Appoinment/Payment");
        }
    }





}
